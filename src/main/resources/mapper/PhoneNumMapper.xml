<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huawei.cloud.dao.PhoneNumMapper">
	<resultMap id="BaseResultMap" type="com.huawei.cloud.bean.PhoneNum">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		<id column="pid" jdbcType="INTEGER" property="pid" />
		<result column="telephone" jdbcType="VARCHAR" property="telephone" />
		<result column="status_id" jdbcType="INTEGER" property="status_id" />
		<result column="empno" jdbcType="INTEGER" property="empno" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		pid, telephone, status_id, empno
	</sql>
	<select id="selectByExample" parameterType="com.huawei.cloud.bean.PhoneNumExample"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from tab_phone
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		select
		<include refid="Base_Column_List" />
		from tab_phone
		where pid = #{pid,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		delete from tab_phone
		where pid = #{pid,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.huawei.cloud.bean.PhoneNumExample">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		delete from tab_phone
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.huawei.cloud.bean.PhoneNum">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		insert into tab_phone (pid, telephone, status_id,
		empno)
		values (#{pid,jdbcType=INTEGER}, #{telephone,jdbcType=VARCHAR},
		#{status_id,jdbcType=INTEGER},
		#{empno,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="com.huawei.cloud.bean.PhoneNum">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		insert into tab_phone
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="pid != null">
				pid,
			</if>
			<if test="telephone != null">
				telephone,
			</if>
			<if test="status_id != null">
				status_id,
			</if>
			<if test="empno != null">
				empno,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="pid != null">
				#{pid,jdbcType=INTEGER},
			</if>
			<if test="telephone != null">
				#{telephone,jdbcType=VARCHAR},
			</if>
			<if test="status_id != null">
				#{status_id,jdbcType=INTEGER},
			</if>
			<if test="empno != null">
				#{empno,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.huawei.cloud.bean.PhoneNumExample"
		resultType="java.lang.Long">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		select count(*) from tab_phone
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		update tab_phone
		<set>
			<if test="record.pid != null">
				pid = #{record.pid,jdbcType=INTEGER},
			</if>
			<if test="record.telephone != null">
				telephone = #{record.telephone,jdbcType=VARCHAR},
			</if>
			<if test="record.status_id != null">
				status_id = #{record.status_id,jdbcType=INTEGER},
			</if>
			<if test="record.empno != null">
				empno = #{record.empno,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		update tab_phone
		set pid = #{record.pid,jdbcType=INTEGER},
		telephone = #{record.telephone,jdbcType=VARCHAR},
		status_id = #{record.status_id,jdbcType=INTEGER},
		empno = #{record.empno,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.huawei.cloud.bean.PhoneNum">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		update tab_phone
		<set>
			<if test="telephone != null">
				telephone = #{telephone,jdbcType=VARCHAR},
			</if>
			<if test="status_id != null">
				status_id = #{status_id,jdbcType=INTEGER},
			</if>
			<if test="empno != null">
				empno = #{empno,jdbcType=INTEGER},
			</if>
		</set>
		where pid = #{pid,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.huawei.cloud.bean.PhoneNum">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Apr 26 
			13:25:41 CST 2019. -->
		update tab_phone
		set telephone = #{telephone,jdbcType=VARCHAR},
		status_id = #{status_id,jdbcType=INTEGER},
		empno = #{empno,jdbcType=INTEGER}
		where pid = #{pid,jdbcType=INTEGER}
	</update>

	<select id="findALL" resultMap="BaseResultMap"> <!--查询总数 管理员 -->
		select * from tab_phone
	</select>

	<select id="findALLAdminWithUsed" resultMap="BaseResultMap"> <!--查询已使用总数 管理员 -->
		select * from tab_phone where status_id=1
	</select>

	<select id="findALLAdminWithoutUsed" resultMap="BaseResultMap"> <!--查询未使用总数 管理员 -->
		select * from tab_phone where status_id=0
	</select>

	<select id="findALLWithEmpno"  statementType="PREPARED" parameterType="java.util.Map"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数 用户 -->
		select DISTINCT(telephone),pid, status_id,empno from ${tablename} where
		empno=${empno}
	</select>

	<select id="findALLWithoutUsed" statementType="PREPARED" parameterType="java.util.Map"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid,status_id from ${tablename} where
		status_id=0 and empno=${empno}
	</select>
	
	<select id="findCountUsed" statementType="PREPARED" parameterType="java.util.Map"
		resultType="java.lang.Integer"> <!-- 普通用户查询总数未使用 用户 -->
		select count(pid) from ${tablename} where
		status_id=1 and empno=${empno}
	</select>
	
	<select id="findCountNotUsed" statementType="PREPARED" parameterType="java.util.Map"
		resultType="java.lang.Integer"> <!-- 普通用户查询总数未使用 用户 -->
		select count(pid) from ${tablename} where
		status_id=0 and empno=${empno}
	</select>

	<select id="findALLWithUsed" statementType="PREPARED" parameterType="java.util.Map"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数已使用 用户 -->
		select DISTINCT(telephone),pid,status_id from ${tablename} where
		status_id=1 and empno=${empno}
	</select>

	<update id="updateOneToUsed" statementType="STATEMENT" parameterType="java.util.Map">
		update ${tablename} set status_id=1 where pid=${pid}
	</update>

	<update id="updateOneToNotUsed" statementType="STATEMENT" parameterType="java.util.Map">
		update ${tablename} set status_id=0 where pid=${pid}
	</update>

	<update id="updateToUsed"  statementType="STATEMENT" parameterType="java.util.Map">
		UPDATE ${tablename} SET
		status_id =1 where pid in
		<foreach collection="list" index="index" item="item" open="("
			separator="," close=")">
			${item}
		</foreach>
	</update>

	<update id="updateToNotUsed"  statementType="STATEMENT" parameterType="java.util.Map">
		UPDATE ${tablename} SET
		status_id =0 where pid in
		<foreach collection="list" index="index" item="item" open="("
			separator="," close=")">
			${item}
		</foreach>
	</update>

	<delete id="emptyUserDataById" statementType="STATEMENT" parameterType="java.util.Map">
		delete from
		${tablename} where empno=${empno}
	</delete>

	<insert id="insertdynamictable" statementType="STATEMENT" parameterType="java.util.Map">
		insert into ${tablename}(telephone,empno)values
		<foreach collection="list" item="telephone" index="index"
			separator=",">
			(${telephone},${empno})
		</foreach>
	</insert>

	<select id="exportDynamicTable" statementType="PREPARED" 
			parameterType="java.util.Map" resultMap="BaseResultMap">
		select telephone from ${tablename} where status_id=0 and empno=${empno}
	</select>

	<delete id="deleteByPidkey" statementType="PREPARED" 
			parameterType="java.util.Map">
		delete from ${tablename} where empno=${empno}
	</delete>

	<delete id="deleteBatch"  statementType="PREPARED" parameterType="java.util.Map">
		delete from ${tablename} where pid in
		<foreach collection="list" index="index" item="item" open="("
			separator="," close=")">
			${item}
		</foreach>
	</delete>
 

		<!-- lua脚本 -->
	<select id="findALLWithoutUsedOne" parameterType="java.lang.Integer"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from tab_phone where status_id=0 and
		empno=#{empno} limit 1
	</select>

	<update id="updateImmediatelyUsed" parameterType="java.lang.Integer">
		update
		tab_phone set status_id=1 where pid=#{pid}
	</update>


		<!-- lua脚本1 -->
	<select id="findALL_1" parameterType="java.lang.Integer"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from tab_phone_1 where status_id=0 and
		empno=#{empno} limit 1
	</select>

	<update id="update_1" parameterType="java.lang.Integer">
		update
		tab_phone_1 set status_id=1 where pid=#{pid}
	</update>
 
		<!-- lua脚本2 -->
	<select id="findALL_2" parameterType="java.lang.Integer"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from tab_phone_2 where status_id=0 and
		empno=#{empno} limit 1
	</select>

	<update id="update_2" parameterType="java.lang.Integer">
		update
		tab_phone_2 set status_id=1 where pid=#{pid}
	</update>
 
		<!-- lua脚本 3-->
	<select id="findALL_3" parameterType="java.lang.Integer"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from tab_phone_3 where status_id=0 and
		empno=#{empno} limit 1
	</select>

	<update id="update_3" parameterType="java.lang.Integer">
		update
		tab_phone_3 set status_id=1 where pid=#{pid}
	</update>
 
		<!-- lua脚本4 -->
	<select id="findALL_4" parameterType="java.lang.Integer"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from tab_phone_4 where status_id=0 and
		empno=#{empno} limit 1
	</select>

	<update id="update_4" parameterType="java.lang.Integer">
		update
		tab_phone_4 set status_id=1 where pid=#{pid}
	</update>

 		<!-- lua脚本 5-->
	<select id="findALL_5" parameterType="java.lang.Integer"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from tab_phone_5 where status_id=0 and
		empno=#{empno} limit 1
	</select>

	<update id="update_5" parameterType="java.lang.Integer">
		update
		tab_phone_5 set status_id=1 where pid=#{pid}
	</update>
 
		<!-- lua脚本6 -->
	<select id="findALL_6" parameterType="java.lang.Integer"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from tab_phone_6 where status_id=0 and
		empno=#{empno} limit 1
	</select>

	<update id="update_6" parameterType="java.lang.Integer">
		update
		tab_phone_6 set status_id=1 where pid=#{pid}
	</update>
 
		<!-- lua脚本7 -->
	<select id="findALL_7" parameterType="java.lang.Integer"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from tab_phone_7 where status_id=0 and
		empno=#{empno} limit 1
	</select>

	<update id="update_7" parameterType="java.lang.Integer">
		update
		tab_phone_7 set status_id=1 where pid=#{pid}
	</update>
 
		<!-- lua脚本8 -->
	<select id="findALL_8" parameterType="java.lang.Integer"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from tab_phone_8 where status_id=0 and
		empno=#{empno} limit 1
	</select>

	<update id="update_8" parameterType="java.lang.Integer">
		update
		tab_phone_8 set status_id=1 where pid=#{pid}
	</update>
 
		<!-- lua脚本 9-->
	<select id="findALL_9" parameterType="java.lang.Integer"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from tab_phone_9 where status_id=0 and
		empno=#{empno} limit 1
	</select>

	<update id="update_9" parameterType="java.lang.Integer">
		update
		tab_phone_9 set status_id=1 where pid=#{pid}
	</update>
 
		<!-- lua脚本10 -->
	<select id="findALL_10" parameterType="java.lang.Integer"
		resultMap="BaseResultMap"> <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from tab_phone_10 where status_id=0 and
		empno=#{empno} limit 1
	</select>

	<update id="update_10" parameterType="java.lang.Integer">
		update
		tab_phone_10 set status_id=1 where pid=#{pid}
	</update>
 
 
 
 	<!-- lua脚本11-60 -->
	<select id="getPhone"  resultMap="BaseResultMap" statementType="PREPARED" > <!-- 普通用户查询总数未使用 用户 -->
		select DISTINCT(telephone),pid from ${tablename} where status_id=0 and
		empno = ${empno} limit 1
	</select>

	<update id="updatePhone" statementType="PREPARED" >
		update 
		${tablename} set status_id=1 where pid=${pid}
	</update>
  
</mapper>