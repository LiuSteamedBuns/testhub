package com.huawei.cloud.dao;

import com.huawei.cloud.bean.PhoneNum;
import com.huawei.cloud.bean.PhoneNumExample;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

public interface PhoneNumMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tab_phone
     *
     * @mbg.generated Fri Apr 26 13:25:41 CST 2019
     */
    long countByExample(PhoneNumExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tab_phone
     *
     * @mbg.generated Fri Apr 26 13:25:41 CST 2019
     */
    int deleteByExample(PhoneNumExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tab_phone
     *
     * @mbg.generated Fri Apr 26 13:25:41 CST 2019
     */
    int deleteByPrimaryKey(Integer pid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tab_phone
     *
     * @mbg.generated Fri Apr 26 13:25:41 CST 2019
     */
    int insert(PhoneNum record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tab_phone
     *
     * @mbg.generated Fri Apr 26 13:25:41 CST 2019
     */
    int insertSelective(PhoneNum record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tab_phone
     *
     * @mbg.generated Fri Apr 26 13:25:41 CST 2019
     */
    List<PhoneNum> selectByExample(PhoneNumExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tab_phone
     *
     * @mbg.generated Fri Apr 26 13:25:41 CST 2019
     */
    PhoneNum selectByPrimaryKey(Integer pid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tab_phone
     *
     * @mbg.generated Fri Apr 26 13:25:41 CST 2019
     */
    int updateByExampleSelective(@Param("record") PhoneNum record, @Param("example") PhoneNumExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tab_phone
     *
     * @mbg.generated Fri Apr 26 13:25:41 CST 2019
     */
    int updateByExample(@Param("record") PhoneNum record, @Param("example") PhoneNumExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tab_phone
     *
     * @mbg.generated Fri Apr 26 13:25:41 CST 2019
     */
    int updateByPrimaryKeySelective(PhoneNum record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tab_phone
     *
     * @mbg.generated Fri Apr 26 13:25:41 CST 2019
     */
    int updateByPrimaryKey(PhoneNum record);
    
    List<PhoneNum> findALL();

	List<PhoneNum> findALLWithEmpno(Map<String,Object> sqlmap);//员工查询

	List<PhoneNum> findALLWithoutUsed(Map<String,Object> sqlmap);

	List<PhoneNum> findALLWithUsed(Map<String,Object> sqlmap);

	void insertdynamictable(Map<String,Object> sqlmap);

	List<PhoneNum> exportDynamicTable(Map<String,Object> exportmap);
    
		
	void updateOneToUsed(Map<String,Object> sqlmap);//单个修改
	
	void updateToUsed(Map<String,Object> sqlmap);//批量修改 

	void updateOneToNotUsed(Map<String,Object> sqlmap);

	void updateToNotUsed(Map<String,Object> sqlmap);

	List<PhoneNum> findALLAdminWithUsed();
    
	List<PhoneNum> findALLAdminWithoutUsed();

	void insertMapBatch(Map<String, Integer> map);

	PhoneNum findALLWithoutUsedOne(Integer empno);

	void updateImmediatelyUsed(Integer pid);

	void emptyUserDataById(Map<String,Object> sqlmap);

	void deleteBatch(Map<String,Object> sqlmap);
	
    void deleteByPidkey(Map<String,Object> sqlmap);

    Integer findCountUsed(Map<String,Object> sqlmap);
    
    Integer findCountNotUsed(Map<String,Object> sqlmap);
    
	PhoneNum findALL_1(Integer empno);
	PhoneNum findALL_2(Integer empno);
	PhoneNum findALL_3(Integer empno);
	PhoneNum findALL_4(Integer empno);
	PhoneNum findALL_5(Integer empno);
	PhoneNum findALL_6(Integer empno);
	PhoneNum findALL_7(Integer empno);
	PhoneNum findALL_8(Integer empno);
	PhoneNum findALL_9(Integer empno);
	PhoneNum findALL_10(Integer empno);

	void update_1(Integer pid);
	void update_2(Integer pid);
	void update_3(Integer pid);
	void update_4(Integer pid);
	void update_5(Integer pid);
	void update_6(Integer pid);
	void update_7(Integer pid);
	void update_8(Integer pid);
	void update_9(Integer pid);
	void update_10(Integer pid);

	
	PhoneNum getPhone(@Param("tablename")String tablename,@Param("empno") Integer empno);
	void updatePhone(@Param("tablename")String tablename,@Param("pid") Integer pid);
	
	
	
	
	
}